generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  COMPANY
}

enum JobType {
  INTERNSHIP
  FULLTIME
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Stream {
  CSE
  ECE
  EB
  ME
  EE
}

model Users {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  phone        String         @unique
  email        String         @unique
  password     String
  cgpa         Float?
  stream       Stream?
  resume       String?
  year         Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  roles        Role[]         @default([STUDENT])
  departmentId String?        @db.ObjectId
  profiles     Profiles[]
  applications Applications[]
  Skills       Skills?        @relation(fields: [skillsId], references: [id])
  skillsId     String?        @db.ObjectId
  groupsId     String?        @db.ObjectId
  Groups       Groups?        @relation(fields: [groupsId], references: [id])
  GroupMembers GroupMembers[]
  companies    Companies[]
  Attempts     Attempts[]
}

model Groups {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  admins       Users[]
  groupMembers GroupMembers[]
}

model GroupMembers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  group     Groups   @relation(fields: [groupId], references: [id])
  groupId   String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Companies {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique
  website   String
  logo      String
  admin     Users?     @relation(fields: [adminId], references: [id])
  adminId   String?    @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  openings  Openings[]
  Problems  Problems[]
}

model Skills {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     Users[]
}

model Openings {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  company          Companies      @relation(fields: [companyId], references: [id])
  companyId        String         @db.ObjectId
  type             String         @default("internship")
  experience       String         @default("0-1 years")
  role             String         @default("Front End Developer")
  location         String
  description      String
  responsibilities String[]
  requirements     String[]
  remuneration     String
  deadline         DateTime
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  applications     Applications[]
}

model Profiles {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // applications Applications[]
}

model Applications {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  user      Users             @relation(fields: [userId], references: [id])
  userId    String            @db.ObjectId
  // profile   Profiles @relation(fields: [profileId], references: [id])
  // profileId String   @db.ObjectId
  opening   Openings          @relation(fields: [openingId], references: [id])
  openingId String            @db.ObjectId
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Questions {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]
  answer        Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  TestQuestions TestQuestions[]
}

model Tests {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  testQuestions TestQuestions[]
  Attempts      Attempts[]
}

model TestQuestions {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  test       Tests     @relation(fields: [testId], references: [id])
  testId     String    @db.ObjectId
  question   Questions @relation(fields: [questionId], references: [id])
  questionId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Attempts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  test      Tests    @relation(fields: [testId], references: [id])
  testId    String   @db.ObjectId
  score     Int
  total     Int
  correct   Int
  incorrect Int
  attempted Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problems {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  companyId   String    @db.ObjectId
  company     Companies @relation(fields: [companyId], references: [id])
  question    String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
